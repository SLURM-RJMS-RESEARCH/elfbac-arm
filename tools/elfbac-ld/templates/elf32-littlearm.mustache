/* Script for -z combreloc: combine and sort reloc sections */
/* Copyright (C) 2014 Free Software Foundation, Inc.
   Copying and distribution of this script, with or without modification,
   are permitted in any medium without royalty provided the copyright
   notice and this notice are preserved.  */
OUTPUT_FORMAT("elf32-littlearm", "elf32-bigarm",
          "elf32-littlearm")
OUTPUT_ARCH(arm)
start = _start + {{ thumb }};
PHDRS
{
    text-segment PT_LOAD FILEHDR PHDRS;
    data-segment PT_LOAD;
    note-segment PT_NOTE;
    tls-segment PT_TLS;
    gnu-stack-segment PT_GNU_STACK FLAGS(0x6);
    elfbac-segment 0x6fe7fbac FLAGS(0x0);
}
SECTIONS
{
    /* Read-only sections, merged into text segment: */
    PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x00010000)); . = SEGMENT_START("text-segment", 0x00010000) + SIZEOF_HEADERS;
    .interp : { *(.interp) } :text-segment
    .note.gnu.build-id : { *(.note.gnu.build-id) } :text-segment :note-segment
    .hash : { *(.hash) } :text-segment
    .gnu.hash : { *(.gnu.hash) } :text-segment
    .dynsym : { *(.dynsym) } :text-segment
    .dynstr : { *(.dynstr) } :text-segment
    .gnu.version : { *(.gnu.version) } :text-segment
    .gnu.version_d : { *(.gnu.version_d) } :text-segment
    .gnu.version_r : { *(.gnu.version_r) } :text-segment
    .rel.dyn :
    {
        *(.rel.init)
        *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
        *(.rel.fini)
        *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
        *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
        *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
        *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
        *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
        *(.rel.ctors)
        *(.rel.dtors)
        *(.rel.got)
        *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
        PROVIDE_HIDDEN (__rel_iplt_start = .);
        *(.rel.iplt)
        PROVIDE_HIDDEN (__rel_iplt_end = .);
    } :text-segment
    .rela.dyn :
    {
        *(.rela.init)
        *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
        *(.rela.fini)
        *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
        *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
        *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
        *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
        *(.rela.ctors)
        *(.rela.dtors)
        *(.rela.got)
        *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
        PROVIDE_HIDDEN (__rela_iplt_start = .);
        *(.rela.iplt)
        PROVIDE_HIDDEN (__rela_iplt_end = .);
    } :text-segment
    .rel.plt :
    {
        *(.rel.plt)
    } :text-segment
    .rela.plt :
    {
        *(.rela.plt)
    } :text-segment
    .init :
    {
        KEEP (*(SORT_NONE(.init)))
    } :text-segment
    .plt : { *(.plt) } :text-segment
    .iplt : { *(.iplt) } :text-segment
    {{#text_sections}}
    .text.{{name}} ALIGN(4096) :
    {
        {{description}}
    } :text-segment
    {{/text_sections}}
    .text :
    {
        *(.text.unlikely .text.*_unlikely .text.unlikely.*)
        *(.text.exit .text.exit.*)
        *(.text.startup .text.startup.*)
        *(.text.hot .text.hot.*)
        *(.text .stub .text.* .gnu.linkonce.t.*)
        /* .gnu.warning sections are handled specially by elf32.em.  */
        *(.gnu.warning)
        *(.glue_7t) *(.glue_7) *(.vfp11_veneer) *(.v4_bx)
    } :text-segment
    .fini :
    {
        KEEP (*(SORT_NONE(.fini)))
    } :text-segment
    PROVIDE (__etext = .);
    PROVIDE (_etext = .);
    PROVIDE (etext = .);
    {{#rodata_sections}}
    .rodata.{{name}} ALIGN(4096) :
    {
        {{description}}
    } :text-segment
    {{/rodata_sections}}
    .rodata : { *(.rodata .rodata.* .gnu.linkonce.r.*) } :text-segment
    .rodata1 : { *(.rodata1) } :text-segment
    .ARM.extab : { *(.ARM.extab* .gnu.linkonce.armextab.*) } :text-segment
     PROVIDE_HIDDEN (__exidx_start = .);
    .ARM.exidx : { *(.ARM.exidx* .gnu.linkonce.armexidx.*) } :text-segment
     PROVIDE_HIDDEN (__exidx_end = .);
    .eh_frame_hdr : { *(.eh_frame_hdr) } :text-segment
    .eh_frame : ONLY_IF_RO { KEEP (*(.eh_frame)) :text-segment }
    .gcc_except_table : ONLY_IF_RO { *(.gcc_except_table
    .gcc_except_table.*) } :text-segment
    /* These sections are generated by the Sun/Oracle C++ compiler.  */
    .exception_ranges : ONLY_IF_RO { *(.exception_ranges
    .exception_ranges*) } :text-segment
    /* Adjust the address for the data segment.  We want to adjust up to
       the same address within the page on the next page up.  */
    . = ALIGN (CONSTANT (MAXPAGESIZE)) - ((CONSTANT (MAXPAGESIZE) - .) & (CONSTANT (MAXPAGESIZE) - 1)); . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
    /* Exception handling  */
    .eh_frame : ONLY_IF_RW { KEEP (*(.eh_frame)) } :data-segment
    .gcc_except_table : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) } :data-segment
    .exception_ranges : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) } :data-segment
    /* Thread Local Storage sections  */
    .tdata : { *(.tdata .tdata.* .gnu.linkonce.td.*) } :data-segment :tls-segment
    .tbss : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) } :data-segment :tls-segment
    .preinit_array :
    {
        PROVIDE_HIDDEN (__preinit_array_start = .);
        KEEP (*(.preinit_array))
        PROVIDE_HIDDEN (__preinit_array_end = .);
    } :data-segment
    .init_array :
    {
        PROVIDE_HIDDEN (__init_array_start = .);
        KEEP (*(SORT(.init_array.*)))
        KEEP (*(.init_array ))
        PROVIDE_HIDDEN (__init_array_end = .);
    } :data-segment
    .fini_array :
    {
        PROVIDE_HIDDEN (__fini_array_start = .);
        KEEP (*(SORT(.fini_array.*)))
        KEEP (*(.fini_array ))
        PROVIDE_HIDDEN (__fini_array_end = .);
    } :data-segment
    .ctors :
    {
        /* gcc uses crtbegin.o to find the start of
           the constructors, so we make sure it is
           first.  Because this is a wildcard, it
           doesn't matter if the user does not
           actually link against crtbegin.o; the
           linker won't look for a file to match a
           wildcard.  The wildcard also means that it
           doesn't matter which directory crtbegin.o
           is in.  */
        KEEP (*crtbegin.o(.ctors))
        KEEP (*crtbegin?.o(.ctors))
        /* We don't want to include the .ctor section from
           the crtend.o file until after the sorted ctors.
           The .ctor section from the crtend file contains the
           end of ctors marker and it must be last */
        KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
        KEEP (*(SORT(.ctors.*)))
        KEEP (*(.ctors))
    } :data-segment
    .dtors :
    {
        KEEP (*crtbegin.o(.dtors))
        KEEP (*crtbegin?.o(.dtors))
        KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
        KEEP (*(SORT(.dtors.*)))
        KEEP (*(.dtors))
    } :data-segment
    .jcr : { KEEP (*(.jcr)) } :data-segment
    .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) } :data-segment
    .dynamic : { *(.dynamic) } :data-segment
    . = DATA_SEGMENT_RELRO_END (0, .);
    .got : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) } :data-segment
    {{#data_sections}}
    .data.{{name}} ALIGN(4096) :
    {
        {{description}}
    } :data-segment
    {{/data_sections}}
    .data :
    {
        PROVIDE (__data_start = .);
        *(.data .data.* .gnu.linkonce.d.*)
        SORT(CONSTRUCTORS)
    } :data-segment
    .data1 : { *(.data1) } :data-segment
    _edata = .; PROVIDE (edata = .);
    . = .;
    __bss_start = .;
    __bss_start__ = .;
    {{#bss_sections}}
    .bss.{{name}} ALIGN(4096) :
    {
        {{description}}
    } :data-segment
    {{/bss_sections}}
    .bss :
    {
        *(.dynbss)
        *(.bss .bss.* .gnu.linkonce.b.*)
        *(COMMON)
        /* Align here to ensure that the .bss section occupies space up to
           _end.  Align after .bss to ensure correct alignment even if the
           .bss section disappears because there are no input sections.
           FIXME: Why do we need it? When there is no .bss section, we don't
           pad the .data section.  */
        . = ALIGN(. != 0 ? 32 / 8 : 1);
    } :data-segment
    _bss_end__ = . ; __bss_end__ = . ;
    . = ALIGN(32 / 8);
    . = SEGMENT_START("ldata-segment", .);
    . = ALIGN(32 / 8);
    __end__ = . ;
    _end = .; PROVIDE (end = .);
    . = DATA_SEGMENT_END (.);
    /* Stabs debugging sections.  */
    .stab          0 : { *(.stab) }
    .stabstr       0 : { *(.stabstr) }
    .stab.excl     0 : { *(.stab.excl) }
    .stab.exclstr  0 : { *(.stab.exclstr) }
    .stab.index    0 : { *(.stab.index) }
    .stab.indexstr 0 : { *(.stab.indexstr) }
    .comment       0 : { *(.comment) }
    /* DWARF debug sections.
       Symbols in the DWARF debugging sections are relative to the beginning
       of the section so we begin them at 0.  */
    /* DWARF 1 */
    .debug          0 : { *(.debug) }
    .line           0 : { *(.line) }
    /* GNU DWARF 1 extensions */
    .debug_srcinfo  0 : { *(.debug_srcinfo) }
    .debug_sfnames  0 : { *(.debug_sfnames) }
    /* DWARF 1.1 and DWARF 2 */
    .debug_aranges  0 : { *(.debug_aranges) }
    .debug_pubnames 0 : { *(.debug_pubnames) }
    /* DWARF 2 */
    .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
    .debug_abbrev   0 : { *(.debug_abbrev) }
    .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) }
    .debug_frame    0 : { *(.debug_frame) }
    .debug_str      0 : { *(.debug_str) }
    .debug_loc      0 : { *(.debug_loc) }
    .debug_macinfo  0 : { *(.debug_macinfo) }
    /* SGI/MIPS DWARF 2 extensions */
    .debug_weaknames 0 : { *(.debug_weaknames) }
    .debug_funcnames 0 : { *(.debug_funcnames) }
    .debug_typenames 0 : { *(.debug_typenames) }
    .debug_varnames  0 : { *(.debug_varnames) }
    /* DWARF 3 */
    .debug_pubtypes 0 : { *(.debug_pubtypes) }
    .debug_ranges   0 : { *(.debug_ranges) }
    /* DWARF Extension.  */
    .debug_macro    0 : { *(.debug_macro) }
    .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
    .note.gnu.arm.ident 0 : { KEEP (*(.note.gnu.arm.ident)) } :note-segment

    .elfbac 0 : { LONG(0x00000000); FILL(0x00000000); . += {{policy_len}}-4; } :elfbac-segment

    /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
}

